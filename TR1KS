local ffi = require("ffi")
local cv = require("cv")

-- Define OpenCV bindings
ffi.cdef[[
typedef struct {
    int x;
    int y;
    int width;
    int height;
} CvRect;

void* cvCreateCameraCapture(int index);
int cvGrabFrame(void* capture);
void* cvRetrieveFrame(void* capture, int streamIndex);
void cvReleaseCapture(void** capture);

CvRect cvHaarDetectObjects(void* image, void* cascade, void* storage, double scale_factor, int min_neighbors, int flags, CvSize min_size);

typedef struct {
    unsigned char* imageData;
    int width;
    int height;
    int widthStep;
} IplImage;
]]

local capture = ffi.C.cvCreateCameraCapture(0)
local face_cascade = cv.CascadeClassifier(cv.data.haarcascades .. 'haarcascade_frontalface_default.xml')

local button = {x = 300, y = 400, width = 200, height = 50, text = "Track Person"}
local tracking = false

function love.load()
    love.window.setMode(800, 600)
end

function love.update(dt)
    if tracking and capture ~= nil then
        ffi.C.cvGrabFrame(capture)
        local frame = ffi.C.cvRetrieveFrame(capture, 0)
        if frame ~= nil then
            local faces = face_cascade:detectMultiScale{frame, scaleFactor = 1.1, minNeighbors = 5, minSize = {30, 30}}
            for _, face in ipairs(faces) do
                love.graphics.rectangle("line", face.x, face.y, face.width, face.height)
            end
        end
    end
end

function love.draw()
    love.graphics.setColor(1, 1, 1)
    love.graphics.rectangle("fill", button.x, button.y, button.width, button.height)
    love.graphics.setColor(0, 0, 0)
    love.graphics.printf(button.text, button.x, button.y + (button.height / 4), button.width, "center")
end

function love.mousepressed(x, y, button, istouch, presses)
    if button == 1 then
        if x > button.x and x < button.x + button.width and y > button.y and y < button.y + button.height then
            tracking = not tracking
        end
    end
end

function love.quit()
    ffi.C.cvReleaseCapture(capture)
end
